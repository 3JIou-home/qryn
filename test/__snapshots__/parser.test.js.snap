// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should compile regex 1`] = `
"SCRIPT: abcd\\\\(
 SYNTAX: abcd\\\\(
  literal: a
   letter: a
  literal: b
   letter: b
  literal: c
   letter: c
  literal: d
   letter: d
  literal: \\\\(
   quoted_brack: \\\\(
"
`;

exports[`should compile regex 2`] = `
"SCRIPT: (a\\\\(bc)
 SYNTAX: (a\\\\(bc)
  any_group: (a\\\\(bc)
   group_tail: a\\\\(bc
    literal: a
     letter: a
    literal: \\\\(
     quoted_brack: \\\\(
    literal: b
     letter: b
    literal: c
     letter: c
"
`;

exports[`should compile regex 3`] = `
"SCRIPT: (?<label1>a[^\\\\[\\\\(\\\\)]bc)
 SYNTAX: (?<label1>a[^\\\\[\\\\(\\\\)]bc)
  any_group: (?<label1>a[^\\\\[\\\\(\\\\)]bc)
   group_name: ?<label1>
    label: label1
   group_tail: a[^\\\\[\\\\(\\\\)]bc
    literal: a
     letter: a
    literal: [
     letter: [
    literal: ^
     letter: ^
    literal: \\\\
     letter: \\\\
    literal: [
     letter: [
    literal: \\\\(
     quoted_brack: \\\\(
    literal: \\\\)
     quoted_brack: \\\\)
    literal: ]
     letter: ]
    literal: b
     letter: b
    literal: c
     letter: c
"
`;

exports[`should compile regex 4`] = `
"SCRIPT: (a(?<label1>[^\\\\[\\\\(\\\\)]bc))
 SYNTAX: (a(?<label1>[^\\\\[\\\\(\\\\)]bc))
  any_group: (a(?<label1>[^\\\\[\\\\(\\\\)]bc))
   group_tail: a(?<label1>[^\\\\[\\\\(\\\\)]bc)
    literal: a
     letter: a
    any_group: (?<label1>[^\\\\[\\\\(\\\\)]bc)
     group_name: ?<label1>
      label: label1
     group_tail: [^\\\\[\\\\(\\\\)]bc
      literal: [
       letter: [
      literal: ^
       letter: ^
      literal: \\\\
       letter: \\\\
      literal: [
       letter: [
      literal: \\\\(
       quoted_brack: \\\\(
      literal: \\\\)
       quoted_brack: \\\\)
      literal: ]
       letter: ]
      literal: b
       letter: b
      literal: c
       letter: c
"
`;

exports[`should compile regex 5`] = `
"SCRIPT: (a[\\\\(\\\\)]+(?<l2>b)(?<label1>[^\\\\[\\\\(\\\\)]bc))
 SYNTAX: (a[\\\\(\\\\)]+(?<l2>b)(?<label1>[^\\\\[\\\\(\\\\)]bc))
  any_group: (a[\\\\(\\\\)]+(?<l2>b)(?<label1>[^\\\\[\\\\(\\\\)]bc))
   group_tail: a[\\\\(\\\\)]+(?<l2>b)(?<label1>[^\\\\[\\\\(\\\\)]bc)
    literal: a
     letter: a
    literal: [
     letter: [
    literal: \\\\(
     quoted_brack: \\\\(
    literal: \\\\)
     quoted_brack: \\\\)
    literal: ]
     letter: ]
    literal: +
     letter: +
    any_group: (?<l2>b)
     group_name: ?<l2>
      label: l2
     group_tail: b
      literal: b
       letter: b
    any_group: (?<label1>[^\\\\[\\\\(\\\\)]bc)
     group_name: ?<label1>
      label: label1
     group_tail: [^\\\\[\\\\(\\\\)]bc
      literal: [
       letter: [
      literal: ^
       letter: ^
      literal: \\\\
       letter: \\\\
      literal: [
       letter: [
      literal: \\\\(
       quoted_brack: \\\\(
      literal: \\\\)
       quoted_brack: \\\\)
      literal: ]
       letter: ]
      literal: b
       letter: b
      literal: c
       letter: c
"
`;

exports[`should erase names 1`] = `"abcd\\\\("`;

exports[`should erase names 2`] = `"(a\\\\(bc)"`;

exports[`should erase names 3`] = `"(a[^\\\\[\\\\(\\\\)]bc)"`;

exports[`should erase names 4`] = `"(a([^\\\\[\\\\(\\\\)]bc))"`;

exports[`should erase names 5`] = `"(a[\\\\(\\\\)]+(b)([^\\\\[\\\\(\\\\)]bc))"`;

exports[`should get named groups 1`] = `Array []`;

exports[`should get named groups 2`] = `
Array [
  Object {
    "val": "a\\\\(bc",
  },
]
`;

exports[`should get named groups 3`] = `
Array [
  Object {
    "name": "label1",
    "val": "a[^\\\\[\\\\(\\\\)]bc",
  },
]
`;

exports[`should get named groups 4`] = `
Array [
  Object {
    "val": "a(?<label1>[^\\\\[\\\\(\\\\)]bc)",
  },
  Object {
    "name": "label1",
    "val": "[^\\\\[\\\\(\\\\)]bc",
  },
]
`;

exports[`should get named groups 5`] = `
Array [
  Object {
    "val": "a[\\\\(\\\\)]+(?<l2>b)(?<label1>[^\\\\[\\\\(\\\\)]bc)",
  },
  Object {
    "name": "l2",
    "val": "b",
  },
  Object {
    "name": "label1",
    "val": "[^\\\\[\\\\(\\\\)]bc",
  },
]
`;

exports[`should parse complex filters 1`] = `"{l1=\\"v1\\"}|l2=\\"v2\\" or l3=\\"v3\\""`;

exports[`should parse complex filters 2`] = `
Array [
  "l2=\\"v2\\" or l3=\\"v3\\"",
]
`;

exports[`should parse complex filters 3`] = `"{l1=\\"v1\\"}| l4=\\"v4\\" and (l2=\\"v2\\" or l3=\\"v3\\")"`;

exports[`should parse complex filters 4`] = `
Array [
  "l4=\\"v4\\" and (l2=\\"v2\\" or l3=\\"v3\\")",
  "l2=\\"v2\\" or l3=\\"v3\\"",
]
`;

exports[`should parse complex filters 5`] = `"{l1=\\"v1\\"}| l4=\\"v4\\" and (l2=\\"v2\\" or (l3=\\"v3\\"))"`;

exports[`should parse complex filters 6`] = `
Array [
  "l4=\\"v4\\" and (l2=\\"v2\\" or (l3=\\"v3\\"))",
  "l2=\\"v2\\" or (l3=\\"v3\\")",
  "l3=\\"v3\\"",
]
`;

exports[`should parse complex filters 7`] = `"{test_id=\\"tid\\"}| freq=\\"4\\" or freq==2"`;

exports[`should parse complex filters 8`] = `
Array [
  "freq=\\"4\\" or freq==2",
]
`;

exports[`should parse complex filters 9`] = `"{test_id=\\"tid\\"} | freq > 3 and (freq=\\"4\\" or freq==2 or freq>1)"`;

exports[`should parse complex filters 10`] = `
Array [
  "freq > 3 and (freq=\\"4\\" or freq==2 or freq>1)",
  "freq=\\"4\\" or freq==2 or freq>1",
]
`;
