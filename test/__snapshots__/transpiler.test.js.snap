// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should transpile log_stream_selector 1`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "time_series.labels",
    "samples.string",
    "time_series.fingerprint",
    "samples.timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'et_dolorem')",
    "JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque'",
    "JSONHas(labels, 'quia')",
    "JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi'",
  ],
}
`;

exports[`should transpile log_stream_selector 2`] = `"SELECT time_series.labels, samples.string, time_series.fingerprint, samples.timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque' AND JSONHas(labels, 'quia') AND JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi'  ORDER BY timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector 3`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "time_series.labels",
    "samples.string",
    "time_series.fingerprint",
    "samples.timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'rerum_laborum')",
    "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []",
  ],
}
`;

exports[`should transpile log_stream_selector 4`] = `"SELECT time_series.labels, samples.string, time_series.fingerprint, samples.timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []  ORDER BY timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector 5`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "time_series.labels",
    "samples.string",
    "time_series.fingerprint",
    "samples.timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'et_dolorem')",
    "JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque'",
  ],
}
`;

exports[`should transpile log_stream_selector 6`] = `"SELECT time_series.labels, samples.string, time_series.fingerprint, samples.timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque'  ORDER BY timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector 7`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "time_series.labels",
    "samples.string",
    "time_series.fingerprint",
    "samples.timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'rerum_laborum')",
    "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == []",
  ],
}
`;

exports[`should transpile log_stream_selector 8`] = `"SELECT time_series.labels, samples.string, time_series.fingerprint, samples.timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == []  ORDER BY timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 1`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "time_series.labels",
    "samples.string",
    "time_series.fingerprint",
    "samples.timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'et_dolorem')",
    "JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque'",
    "JSONHas(labels, 'quia')",
    "JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi'",
    "position(string, 'at et') != 0",
  ],
}
`;

exports[`should transpile log_stream_selector with stream filter 2`] = `"SELECT time_series.labels, samples.string, time_series.fingerprint, samples.timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque' AND JSONHas(labels, 'quia') AND JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi' AND position(string, 'at et') != 0  ORDER BY timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 3`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "time_series.labels",
    "samples.string",
    "time_series.fingerprint",
    "samples.timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'rerum_laborum')",
    "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []",
    "position(string, 'consequatur nam soluta') == 0",
  ],
}
`;

exports[`should transpile log_stream_selector with stream filter 4`] = `"SELECT time_series.labels, samples.string, time_series.fingerprint, samples.timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != [] AND position(string, 'consequatur nam soluta') == 0  ORDER BY timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 5`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "time_series.labels",
    "samples.string",
    "time_series.fingerprint",
    "samples.timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'et_dolorem')",
    "JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque'",
    "extractAllGroups(string, '(^mol[eE][^ ]+e +voluptatibus)') != []",
  ],
}
`;

exports[`should transpile log_stream_selector with stream filter 6`] = `"SELECT time_series.labels, samples.string, time_series.fingerprint, samples.timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque' AND extractAllGroups(string, '(^mol[eE][^ ]+e +voluptatibus)') != []  ORDER BY timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 7`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "time_series.labels",
    "samples.string",
    "time_series.fingerprint",
    "samples.timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'rerum_laborum')",
    "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == []",
    "extractAllGroups(string, '(cons[eE][^ ]+r nam soluta)') == []",
  ],
}
`;

exports[`should transpile log_stream_selector with stream filter 8`] = `"SELECT time_series.labels, samples.string, time_series.fingerprint, samples.timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == [] AND extractAllGroups(string, '(cons[eE][^ ]+r nam soluta)') == []  ORDER BY timestamp_ms desc  LIMIT 1000"`;
