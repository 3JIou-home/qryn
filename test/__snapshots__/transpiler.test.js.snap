// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should transpile aggregation_operator 1`] = `
Object {
  "ctx": Object {
    "duration": 300000,
    "end": 3600000,
    "start": 0,
  },
  "from": "agg_a",
  "group_by": Array [
    "labels",
    "timestamp_ms",
  ],
  "matrix": true,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "asc",
  },
  "select": Array [
    "arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValuesRaw(labels)) as labels",
    "timestamp_ms",
    "sum(value) as value",
  ],
  "with": Object {
    "agg_a": Object {
      "ctx": undefined,
      "from": "rate_c",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "matrix": true,
      "order_by": Object {
        "name": "timestamp_ms",
        "order": "asc",
      },
      "select": Array [
        "labels",
        "timestamp_ms",
        "sum(value) as value",
      ],
      "with": undefined,
    },
    "rate_c": Object {
      "ctx": Object {
        "end": 3600000,
        "start": 0,
      },
      "from": "loki.samples",
      "group_by": Array [
        "time_series.labels",
        "floor(samples.timestamp_ms / 300000) * 300000",
      ],
      "left_join": Array [
        Object {
          "name": "loki.time_series",
          "on": Array [
            "AND",
            "samples.fingerprint = time_series.fingerprint",
          ],
        },
      ],
      "limit": undefined,
      "matrix": true,
      "order_by": Object {
        "name": "timestamp_ms",
        "order": "asc",
      },
      "select": Array [
        "time_series.labels",
        "floor(samples.timestamp_ms / 300000) * 300000 as timestamp_ms",
        "toFloat64(count(1)) * 1000 / 300000 as value",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'minus_nam')",
        "JSONExtractString(labels, 'minus_nam') = 'aut illo'",
      ],
    },
  },
}
`;

exports[`should transpile aggregation_operator 2`] = `"WITH rate_c as ( SELECT time_series.labels, floor(samples.timestamp_ms / 300000) * 300000 as timestamp_ms, toFloat64(count(1)) * 1000 / 300000 as value FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'minus_nam') AND JSONExtractString(labels, 'minus_nam') = 'aut illo'  GROUP BY time_series.labels, floor(samples.timestamp_ms / 300000) * 300000 ORDER BY timestamp_ms asc ), agg_a as ( SELECT labels, timestamp_ms, sum(value) as value FROM rate_c  GROUP BY labels, timestamp_ms ORDER BY timestamp_ms asc ) SELECT arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValuesRaw(labels)) as labels, timestamp_ms, sum(value) as value FROM agg_a  GROUP BY labels, timestamp_ms ORDER BY timestamp_ms asc "`;

exports[`should transpile aggregation_operator 3`] = `
Object {
  "ctx": Object {
    "duration": 300000,
    "end": 3600000,
    "start": 0,
  },
  "from": "agg_a",
  "group_by": Array [
    "labels",
    "timestamp_ms",
  ],
  "matrix": true,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "asc",
  },
  "select": Array [
    "arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValuesRaw(labels)) as labels",
    "timestamp_ms",
    "sum(value) as value",
  ],
  "with": Object {
    "agg_a": Object {
      "ctx": undefined,
      "from": "rate_c",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "matrix": true,
      "order_by": Object {
        "name": "timestamp_ms",
        "order": "asc",
      },
      "select": Array [
        "labels",
        "timestamp_ms",
        "sum(value) as value",
      ],
      "with": undefined,
    },
    "rate_c": Object {
      "ctx": Object {
        "end": 3600000,
        "start": 0,
      },
      "from": "loki.samples",
      "group_by": Array [
        "time_series.labels",
        "floor(samples.timestamp_ms / 300000) * 300000",
      ],
      "left_join": Array [
        Object {
          "name": "loki.time_series",
          "on": Array [
            "AND",
            "samples.fingerprint = time_series.fingerprint",
          ],
        },
      ],
      "limit": undefined,
      "matrix": true,
      "order_by": Object {
        "name": "timestamp_ms",
        "order": "asc",
      },
      "select": Array [
        "time_series.labels",
        "floor(samples.timestamp_ms / 300000) * 300000 as timestamp_ms",
        "toFloat64(count(1)) * 1000 / 300000 as value",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'rerum_laborum')",
        "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []",
        "position(string, 'consequatur nam soluta') == 0",
      ],
    },
  },
}
`;

exports[`should transpile aggregation_operator 4`] = `"WITH rate_c as ( SELECT time_series.labels, floor(samples.timestamp_ms / 300000) * 300000 as timestamp_ms, toFloat64(count(1)) * 1000 / 300000 as value FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != [] AND position(string, 'consequatur nam soluta') == 0  GROUP BY time_series.labels, floor(samples.timestamp_ms / 300000) * 300000 ORDER BY timestamp_ms asc ), agg_a as ( SELECT labels, timestamp_ms, sum(value) as value FROM rate_c  GROUP BY labels, timestamp_ms ORDER BY timestamp_ms asc ) SELECT arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValuesRaw(labels)) as labels, timestamp_ms, sum(value) as value FROM agg_a  GROUP BY labels, timestamp_ms ORDER BY timestamp_ms asc "`;

exports[`should transpile aggregation_operator 5`] = `
Object {
  "ctx": Object {
    "duration": 300000,
    "end": 3600000,
    "start": 0,
  },
  "from": "agg_a",
  "group_by": Array [
    "labels",
    "timestamp_ms",
  ],
  "matrix": true,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "asc",
  },
  "select": Array [
    "arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValuesRaw(labels)) as labels",
    "timestamp_ms",
    "sum(value) as value",
  ],
  "with": Object {
    "agg_a": Object {
      "ctx": undefined,
      "from": "rate_c",
      "group_by": Array [
        "labels",
        "timestamp_ms",
      ],
      "matrix": true,
      "order_by": Object {
        "name": "timestamp_ms",
        "order": "asc",
      },
      "select": Array [
        "labels",
        "timestamp_ms",
        "sum(value) as value",
      ],
      "with": undefined,
    },
    "rate_c": Object {
      "ctx": Object {
        "end": 3600000,
        "start": 0,
      },
      "from": "loki.samples",
      "group_by": Array [
        "time_series.labels",
        "floor(samples.timestamp_ms / 300000) * 300000",
      ],
      "left_join": Array [
        Object {
          "name": "loki.time_series",
          "on": Array [
            "AND",
            "samples.fingerprint = time_series.fingerprint",
          ],
        },
      ],
      "limit": undefined,
      "matrix": true,
      "order_by": Object {
        "name": "timestamp_ms",
        "order": "asc",
      },
      "select": Array [
        "time_series.labels",
        "floor(samples.timestamp_ms / 300000) * 300000 as timestamp_ms",
        "toFloat64(count(1)) * 1000 / 300000 as value",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'minus_nam')",
        "JSONExtractString(labels, 'minus_nam') = 'aut illo'",
      ],
    },
  },
}
`;

exports[`should transpile aggregation_operator 6`] = `"WITH rate_c as ( SELECT time_series.labels, floor(samples.timestamp_ms / 300000) * 300000 as timestamp_ms, toFloat64(count(1)) * 1000 / 300000 as value FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'minus_nam') AND JSONExtractString(labels, 'minus_nam') = 'aut illo'  GROUP BY time_series.labels, floor(samples.timestamp_ms / 300000) * 300000 ORDER BY timestamp_ms asc ), agg_a as ( SELECT labels, timestamp_ms, sum(value) as value FROM rate_c  GROUP BY labels, timestamp_ms ORDER BY timestamp_ms asc ) SELECT arrayFilter(x -> x.1 IN ('label_1'), JSONExtractKeysAndValuesRaw(labels)) as labels, timestamp_ms, sum(value) as value FROM agg_a  GROUP BY labels, timestamp_ms ORDER BY timestamp_ms asc "`;

exports[`should transpile log_range_aggregation 1`] = `
Object {
  "ctx": Object {
    "duration": 300000,
    "end": 3600000,
    "start": 0,
  },
  "from": "rate_c",
  "group_by": Array [
    "labels",
    "timestamp_ms",
  ],
  "matrix": true,
  "order_by": Object {
    "name": "timestamp_ms",
    "order": "asc",
  },
  "select": Array [
    "labels",
    "timestamp_ms",
    "sum(value) as value",
  ],
  "with": Object {
    "rate_c": Object {
      "ctx": Object {
        "end": 3600000,
        "start": 0,
      },
      "from": "loki.samples",
      "group_by": Array [
        "time_series.labels",
        "floor(samples.timestamp_ms / 300000) * 300000",
      ],
      "left_join": Array [
        Object {
          "name": "loki.time_series",
          "on": Array [
            "AND",
            "samples.fingerprint = time_series.fingerprint",
          ],
        },
      ],
      "limit": undefined,
      "matrix": true,
      "order_by": Object {
        "name": "timestamp_ms",
        "order": "asc",
      },
      "select": Array [
        "time_series.labels",
        "floor(samples.timestamp_ms / 300000) * 300000 as timestamp_ms",
        "toFloat64(count(1)) * 1000 / 300000 as value",
      ],
      "where": Array [
        "AND",
        "JSONHas(labels, 'minus_nam')",
        "JSONExtractString(labels, 'minus_nam') = 'aut illo'",
      ],
    },
  },
}
`;

exports[`should transpile log_range_aggregation 2`] = `"WITH rate_c as ( SELECT time_series.labels, floor(samples.timestamp_ms / 300000) * 300000 as timestamp_ms, toFloat64(count(1)) * 1000 / 300000 as value FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'minus_nam') AND JSONExtractString(labels, 'minus_nam') = 'aut illo'  GROUP BY time_series.labels, floor(samples.timestamp_ms / 300000) * 300000 ORDER BY timestamp_ms asc ) SELECT labels, timestamp_ms, sum(value) as value FROM rate_c  GROUP BY labels, timestamp_ms ORDER BY timestamp_ms asc "`;

exports[`should transpile log_range_aggregation 3`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "labels, timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "DISTINCT time_series.labels",
    "samples.string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'rerum_laborum')",
    "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []",
    "position(string, 'consequatur nam soluta') == 0",
  ],
}
`;

exports[`should transpile log_range_aggregation 4`] = `" SELECT DISTINCT time_series.labels, samples.string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != [] AND position(string, 'consequatur nam soluta') == 0  ORDER BY labels, timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_range_aggregation 5`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "labels, timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "DISTINCT time_series.labels",
    "samples.string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'et_dolorem')",
    "JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque'",
    "extractAllGroups(string, '(^mol[eE][^ ]+e +voluptatibus)') != []",
  ],
}
`;

exports[`should transpile log_range_aggregation 6`] = `" SELECT DISTINCT time_series.labels, samples.string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque' AND extractAllGroups(string, '(^mol[eE][^ ]+e +voluptatibus)') != []  ORDER BY labels, timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_range_aggregation 7`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "labels, timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "DISTINCT time_series.labels",
    "samples.string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'rerum_laborum')",
    "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == []",
    "extractAllGroups(string, '(cons[eE][^ ]+r nam soluta)') == []",
  ],
}
`;

exports[`should transpile log_range_aggregation 8`] = `" SELECT DISTINCT time_series.labels, samples.string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == [] AND extractAllGroups(string, '(cons[eE][^ ]+r nam soluta)') == []  ORDER BY labels, timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector 1`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "labels, timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "DISTINCT time_series.labels",
    "samples.string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'et_dolorem')",
    "JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque'",
    "JSONHas(labels, 'quia')",
    "JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi'",
  ],
}
`;

exports[`should transpile log_stream_selector 2`] = `" SELECT DISTINCT time_series.labels, samples.string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque' AND JSONHas(labels, 'quia') AND JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi'  ORDER BY labels, timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector 3`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "labels, timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "DISTINCT time_series.labels",
    "samples.string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'rerum_laborum')",
    "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []",
  ],
}
`;

exports[`should transpile log_stream_selector 4`] = `" SELECT DISTINCT time_series.labels, samples.string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []  ORDER BY labels, timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector 5`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "labels, timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "DISTINCT time_series.labels",
    "samples.string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'et_dolorem')",
    "JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque'",
  ],
}
`;

exports[`should transpile log_stream_selector 6`] = `" SELECT DISTINCT time_series.labels, samples.string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque'  ORDER BY labels, timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector 7`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "labels, timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "DISTINCT time_series.labels",
    "samples.string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'rerum_laborum')",
    "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == []",
  ],
}
`;

exports[`should transpile log_stream_selector 8`] = `" SELECT DISTINCT time_series.labels, samples.string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == []  ORDER BY labels, timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 1`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "labels, timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "DISTINCT time_series.labels",
    "samples.string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'et_dolorem')",
    "JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque'",
    "JSONHas(labels, 'quia')",
    "JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi'",
    "position(string, 'at et') != 0",
  ],
}
`;

exports[`should transpile log_stream_selector with stream filter 2`] = `" SELECT DISTINCT time_series.labels, samples.string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') = 'nemo doloremque' AND JSONHas(labels, 'quia') AND JSONExtractString(labels, 'quia') = 'eum voluptatem non eligendi' AND position(string, 'at et') != 0  ORDER BY labels, timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 3`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "labels, timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "DISTINCT time_series.labels",
    "samples.string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'rerum_laborum')",
    "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != []",
    "position(string, 'consequatur nam soluta') == 0",
  ],
}
`;

exports[`should transpile log_stream_selector with stream filter 4`] = `" SELECT DISTINCT time_series.labels, samples.string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') != [] AND position(string, 'consequatur nam soluta') == 0  ORDER BY labels, timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 5`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "labels, timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "DISTINCT time_series.labels",
    "samples.string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'et_dolorem')",
    "JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque'",
    "extractAllGroups(string, '(^mol[eE][^ ]+e +voluptatibus)') != []",
  ],
}
`;

exports[`should transpile log_stream_selector with stream filter 6`] = `" SELECT DISTINCT time_series.labels, samples.string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'et_dolorem') AND JSONExtractString(labels, 'et_dolorem') != 'nemo doloremque' AND extractAllGroups(string, '(^mol[eE][^ ]+e +voluptatibus)') != []  ORDER BY labels, timestamp_ms desc  LIMIT 1000"`;

exports[`should transpile log_stream_selector with stream filter 7`] = `
Object {
  "from": "loki.samples",
  "left_join": Array [
    Object {
      "name": "loki.time_series",
      "on": Array [
        "AND",
        "samples.fingerprint = time_series.fingerprint",
      ],
    },
  ],
  "limit": 1000,
  "order_by": Object {
    "name": "labels, timestamp_ms",
    "order": "desc",
  },
  "select": Array [
    "DISTINCT time_series.labels",
    "samples.string",
    "time_series.fingerprint as fingerprint",
    "samples.timestamp_ms as timestamp_ms",
  ],
  "where": Array [
    "AND",
    "JSONHas(labels, 'rerum_laborum')",
    "extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == []",
    "extractAllGroups(string, '(cons[eE][^ ]+r nam soluta)') == []",
  ],
}
`;

exports[`should transpile log_stream_selector with stream filter 8`] = `" SELECT DISTINCT time_series.labels, samples.string, time_series.fingerprint as fingerprint, samples.timestamp_ms as timestamp_ms FROM loki.samples  LEFT JOIN loki.time_series ON samples.fingerprint = time_series.fingerprint WHERE JSONHas(labels, 'rerum_laborum') AND extractAllGroups(JSONExtractString(labels, 'rerum_laborum'), '(^con.+q.at[a-z]r)') == [] AND extractAllGroups(string, '(cons[eE][^ ]+r nam soluta)') == []  ORDER BY labels, timestamp_ms desc  LIMIT 1000"`;
